
---------------------------------------------------------------------------------------
Требования к развертыванию системы

В минимальном варианте система не требует собственных серверов и полностью работает
в облачных сервисах. В максимальном варианте можно использовать собственные сервисы,
описанные ниже. Возможны промежуточные варианты (например, свой узел для внесения
данных, но облачные сервисы для доступа в режиме поиска и просмотра).
---------------------------------------------------------------------------------------
Без серверов	- Браузер (для просмотра данных)
		- Браузер с поддержкой Web3 (только для администрирования: MetaMask)
		- Остальное в бесплатном облаке
С серверами	- Сервер для сайта приложения (NodeJS)
		- Узел сети Ethereum (для внесения изменений в блокчейн)
		- Стек Graph (для гибкого поиска данных и просмотра)
		  Состав стека описан ниже
---------------------------------------------------------------------------------------


---------------------------------------------------------------------------------------
Языки реализации
---------------------------------------------------------------------------------------
JavaScript	Frontend, Backend
TypeScript	Frontend, Backend
Solidity	Smart-контакты Ethereum
WebAssembly	Описание смарт-контракта для индексации в Graph
---------------------------------------------------------------------------------------


---------------------------------------------------------------------------------------
Использованные библиотеки для smart-контрактов Solidity
---------------------------------------------------------------------------------------
OpenZeppelin	Библиотека для написания апгрейдабельных смарт-контрактов
---------------------------------------------------------------------------------------


---------------------------------------------------------------------------------------
Основные FRONTEND технологии и фрэймворки
---------------------------------------------------------------------------------------
JAMstack	Технология создания сайтов с использованием JavaScript, APIs, Markup.
		В основе лежит технология смещения фокуса с ныне абстрагируемого
		бэкенда на мощный фронтенд:
		- JavaScript: любое динамическое обновление данных выполняется
		    кодом JavaScript полностью на web-клиенте.
		- API: все функции на стороне сервера или действия с базами данных
		    абстрагируются в повторно используемые API, доступ к которым
		    осуществляется через HTTPS с помощью JS.
		- Разметка: шаблонная разметка должна быть предварительно собрана во
		    время сборки, обычно с использованием генератора сайтов для
		    контентных сайтов или инструмента сборки для веб-приложений.
                Сайты размещаются в распределенной CDN (Content Distribution Network),
                не требуя выделенного сервера для своей работы. Активные серверные
                компоненты (лямбда-функции) также работают в облачных сервисах.
React		Фреймворк для разработки UI
React-Bootstrap	React-реализация компонентов Bootstrap для работы с дизайном и стилями UI
React-Table	React-компонент для работы с таблицами
Formik		React-компонент для работы с формами
Yup		Библиотека валидации полей форм
URQL		Реализация GraphQL API
---------------------------------------------------------------------------------------


---------------------------------------------------------------------------------------
Основные BACKEND технологии и фрэймворки
---------------------------------------------------------------------------------------
NodeJS		Серверный движок JavaScript V8
Next.js		Фрэймворк с поддержкой SSR, TypeScript, severless функций и Now.
		Позволяет разворачивать сервер как для backend API, так и для
		загрузки фронтенда. Из коробки поддерживает технологии Babel
		(трансляция кода TypeScript и других диалектов в JavaScript),
		Webpack (оптимизация и сжатие кода JavaScript), SASS (язык
		описания CSS стилей), Hot-Reloading страницы в режиме разработки,
		оптимизацию и генерацию сайта, включая статические страницы,
		страницы с поддержкой SSR и API со стороны сервера. Обеспечивает
		публикацию сайта на бесплатный хостинг Now одной командой.
Now		Система облачного хостинга статических и serverless сайтов.
		Доступна как платный или бесплатный сервис.
SSR		Server Side Rendering - предварительное формирование страниц на
		сервере с возвомжностью последующего обновления данных в клиенте
		без перечитывания страницы
---------------------------------------------------------------------------------------


---------------------------------------------------------------------------------------
Протокол для API
---------------------------------------------------------------------------------------
GraphQL		Протокол и язык запросов данных (замена классическому REST RPC)
---------------------------------------------------------------------------------------


---------------------------------------------------------------------------------------
Интерфейс для доступа к Ethereum Blockchain
---------------------------------------------------------------------------------------
Geth		Узел сети Ethereum или одной из его тестовых сетей. Поддерживает GraphQL.
		Используется приложением для изменения данных (доступ ограничен).

Graph		Стек для индексирования блокчейна с выборкой интересующих данных контракта
		с возможностью последующего эффективного поиска по ним. Используется для
		просмотра данных в режиме только для чтения. Поддерживает GraphQL.
		Может устанавливаться локально (ниже перечислены его компоненты) или
		доступен как бесплатный сервис (регистрации не требуется).
---------------------------------------------------------------------------------------
Geth		Узел сети Ethereum или одной из его тестовых сетей
Graph		Система индексирования блокчейна с поддержкой протокола GraphQL
PostgreSQL	Реляционная СУБД, используемая Graph для хранения данных из блокчейна
IPFS		Распределенная файловая система хранения данных смарт-контрактов
---------------------------------------------------------------------------------------


---------------------------------------------------------------------------------------
Вспомогательные средства и технологии, использованные в процессе разработки
---------------------------------------------------------------------------------------
hasura.io	GraphQL API со стороны сервера, поддержанное PostgreSQL базой
infura.io	Ethereum blockchain RPC API (сервис)
Ganache		Система быстрого развертывания локальных тестовых сетей Ethereum
Docker		Система запуска приложений в контейнерах
Remix		IDE для написания и тестирования smart-контрактов Ethereum
---------------------------------------------------------------------------------------
